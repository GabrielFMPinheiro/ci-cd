name: Merge PRs with Staging Label

on:
  pull_request:
    types: [labeled, synchronize, reopened, closed]

permissions:
  pull-requests: write
  contents: write
  issues: write

jobs:
  merge-and-save:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm install @actions/github@5.0.1 axios

      - name: Check if PR has using:staging label
        id: check-label
        run: |
          node -e "
            const github = require('@actions/github');
            const context = github.context;

            const labels = context.payload.pull_request.labels.map(label => label.name);
            console.log('Labels on PR:', labels);
            if (labels.includes('using:staging')) {
              console.log('PR has using:staging label');
              console.log('::set-output name=has_label::true');
            } else {
              console.log('PR does not have using:staging label');
              console.log('::set-output name=has_label::false');
            }
          "
      - name: Merge and save if labeled
        if: steps.check-label.outputs.has_label == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node -e "
            const axios = require('axios');
            const fs = require('fs');
            const { execSync } = require('child_process');

            const GITHUB_REPOSITORY = process.env.GITHUB_REPOSITORY;
            const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
            const PR_NUMBER = JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH)).pull_request.number;
            const CURRENT_BRANCH = JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH)).pull_request.head.ref;

            const headers = {
              'Authorization': \`token \${GITHUB_TOKEN}\`,
              'Accept': 'application/vnd.github.v3+json'
            };

            async function getPRs() {
              const response = await axios.get(\`https://api.github.com/repos/\${GITHUB_REPOSITORY}/pulls\`, { headers });
              return response.data.filter(pr => pr.labels.some(label => label.name === 'using:staging'));
            }

            async function getCheckRuns(commitSha) {
              const response = await axios.get(\`https://api.github.com/repos/\${GITHUB_REPOSITORY}/commits/\${commitSha}/check-runs\`, { headers });
              return response.data.check_runs;
            }

            async function main() {
              try {
                execSync('git fetch --all');

                const prs = await getPRs();
                console.log('Fetched PRs with using:staging label:', prs);

                const successfulPRs = [];

                for (const pr of prs) {
                  if (pr.head.ref === CURRENT_BRANCH) {
                    console.log(\`Skipping current PR #\${pr.number}\`);
                    continue;
                  }

                  const checkRuns = await getCheckRuns(pr.head.sha);
                  const failedChecks = checkRuns.filter(check => check.conclusion !== 'success');

                  if (failedChecks.length > 0) {
                    const failedCheckNames = failedChecks.map(check => \`\${check.name}: \${check.conclusion}\`).join('\\n');
                    console.log(\`PR #\${pr.number} has failed checks:\\n\${failedCheckNames}\`);

                    await axios.post(\`https://api.github.com/repos/\${GITHUB_REPOSITORY}/issues/\${pr.number}/comments\`, {
                      body: \`The following status checks failed for PR #\${pr.number}:\\n\${failedCheckNames}\`
                    }, { headers });

                    continue;
                  }

                  successfulPRs.push(pr.number);
                }

                console.log('Merging successful PRs:', successfulPRs);

                for (const prNumber of successfulPRs) {
                  console.log(\`Merging PR #\${prNumber}\`);
                  execSync(\`git fetch origin pull/\${prNumber}/head:pr-\${prNumber}\`);
                  try {
                    execSync(\`git merge pr-\${prNumber} --no-commit --allow-unrelated-histories\`);
                    execSync('git commit -m "Merge all successful PRs with using:staging label"');
                  } catch (error) {
                    console.error(\`Conflict detected in PR #\${prNumber}\`);
                    await axios.post(\`https://api.github.com/repos/\${GITHUB_REPOSITORY}/issues/\${prNumber}/comments\`, {
                      body: \`Conflict detected during merge with PR #\${prNumber}\`
                    }, { headers });
                    throw error;
                  }
                }

                console.log('Merge concluded successfully');
              } catch (error) {
                console.error('Error during merge process:', error);
                process.exit(1);
              }
            }

            main();
          "
